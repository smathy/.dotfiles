function current_git_stash() {
  local git_stash=`git stash list 2>/dev/null | wc -l | sed 's/ *//g'`

  if [[ -n "$git_stash" && $git_stash > 0 ]]; then
    echo " $git_stash"
  fi
}

function current_git_branch() {
  local git_branch=`git rev-parse --abbrev-ref HEAD 2>/dev/null`

  if [[ -n "$git_branch" ]]; then
    echo " $git_branch"
  fi
}

current_git_hash() {
  local git_hash=`git_prompt_short_sha`

  if [[ -n "$git_hash" ]]; then
    echo " $git_hash"
  fi
}

function reset_db() {
  base_db="peerstreet"
  bup=$1
  root_db="postgres"
  for db in ${base_db} ${base_db}_test; do
    psql -d $root_db -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$db' AND pid <> pg_backend_pid()"
    psql -d $root_db -c "DROP DATABASE $db"
    psql -d $root_db -c "CREATE DATABASE $db"
    pg_restore -d $db $bup
  done
}

rr() {
  if [[ "$*" == "" ]]; then
    rails routes
  else
    rails routes | rg $*
  fi
}

TLAST=

t() {
  if [[ "$*" != "" ]]; then
		TLAST=("$@")
	fi
	rspec ${TLAST[@]} 2>/dev/null
}

tt() {
  echo "t $TLAST"
  rspec $TLAST 2>/dev/null
}

tr() {
	if [[ "$*" == "" ]]; then
		t
	else
		echo t $(rg --vimgrep $* spec/**/*_spec.rb | cut -d: -f1-2)
		t $(rg --vimgrep $* spec/**/*_spec.rb | cut -d: -f1-2)
	fi
}

function RM() {
  str=$(pgrep "spring .* $(basename $1)")
  if [[ "$str" != "" ]]; then
    kill $str
  fi
  unset str
  rm -rf $1
}

function tags() {
  dir=$1
  if [[ "$dir" == "" ]]; then
    dir='.'
  fi

  if [[ ! -d $dir ]]; then
    echo $'\e[1;31m'Error: $dir is not a directory.$'\e[0m'
    return 1
  fi

  if [[ -d "$dir/.bundle" ]]; then
    ctags -Rf "$dir/.tags" "$dir" $(bundle list --paths | grep "^/");
  else
    ctags -Rf "$dir/.tags" "$dir"
  fi
}

unalias md 2>/dev/null
function md() {
  mkdir -p $1
  cd $1
}

function rsed() {
  find {app,lib,spec,test} -type f -not -path '/.' -print0 2>/dev/null | xargs -0 sed -i'' -e "$@"
}

function ff() {
  find $* -type f
}

vr() {
  v $*
  rspec $*
}

int() {
	kill -INT -$1
}

# vim: ft=zsh
